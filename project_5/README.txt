gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0

logger.c

Έχει επιπλέον υλοποιηθεί και η fopen64(), η οποία καλείται από την openssl για την κρυπτογράφηση.
Στην πραγματικότητα, αντί να καλείται η fopen64(), η συνάρτηση έχει παρακαμφθεί ώστε να καλείται
η fopen() που είχαμε δημιουργήσει στην προηγούμενη εργασία.

=================================================================================================
ransomware.sh

Το bash script που υλοποιήθηκε παίρνει ως ορίσματα ένα string που δηλώνει το directory στο οποίο 
θέλουμε να γίνει η δημιουργία των αρχείων και έναν αριθμό που δηλώνει το πόσα αρχεία θέλουμε να 
δημιουργηθούν. Η κλήση του έχει την εξής μορφή:

``` ./ransomware.sh -D <dir> -n <num> ```

Στη συνέχεια καλείται το ./test_aclog που δημιουργήθηκε στην προηγούμενη εργασία, μόνο που πλέον 
έχει προστεθεί η λειτουργία να δημιουργεί αρχεία σε ένα directory που θέλουμε, και όχι μόνο να
δημιουργεί αρχεία hardcoded. Έπειτα καλείται η συνάρτηση encrypt, η οποία κρυπτογραφεί τα αρχεία 
που υπάρχουν στο directory που επιλέξαμε να δημιουργηθούν τα αρχεία, και διαγράφει τα προτότυπα.
Η κρυπτογράφηση γίνεται με την εντολή "openssl enc -aes-256-ecb -in $f -out "$f.encrypt" -k 1234
-a -pbkdf2". Και αυτή η εντολή και το ./test_aclog καλούνται με πρόθεμα "LD_PRELOAD=./logger.so"
ώστε να χρησιμοποιηθούν οι συναρτήσεις διαχείρησης αρχείων (fopen, fopen64, fwrite) που 
υλοποιήθηκαν εκ νέου στο logger.c

**NOTE**: Έχει δημιουργηθεί και η λειτουργία αποκρυπτογράφησης των αρχείων, αλλά δε γίνεται σωστά,
δημιουργώντας τα αρχεία όμως κενά, χωρίς το content που είχαμε προσθέσει κατά τη δημιουργία τους.
Η αποκρυπτογράφηση γίνεται με την εντολή "openssl aes-256-ecb -d -in $f -out ${f%.encrypt} -k 1234
-a -pbkdf2" 

=================================================================================================
acmonitor.c

Το εργαλείο acmonitor λειτουργεί κατα κόρον όπως αυτό της προηγούμενης εργασίας. Επιπλέον, έχουν 
προστεθεί δύο νέες λειτουργίες, οι οποίες θα αναλυθούν παρακάτω. Σε κάθε περίπτωση, όπως και στο 
προηγούμενο εργαλείο, αρχικά γίνεται ανάγνωση του αρχείου file_logging.log, και γίνεται η 
αποθήκευση των δεδομένων του σε έναν πίνακα τύπου struct entry.
Το εργαλείο διαθέτει τις δύο εξής νέες λειτουργίες:

    1. LIST FILE CREATIONS
    Πρώτα, αποθηκεύουμε τη σημερινή ημερομηνία και την ώρα εκτέλεσης του εργαλείου. Έπειτα, 
    διασχύζουμε τον πίνακα με τα αρχεία που έχουν καταγραφεί στο file_logging.log. Για κάθε ένα 
    από αυτά, συγκρίνουμε την ημερομηνία και την ώρα δημιουργίας του entry. Αν η διαφορά τους 
    είναι μικρότερη των 20' και το flag access_type είναι 0 (για file_creation), τότε αυξάνουμε 
    τον αριθμό των αρχείων κατά ένα. Αν ο τελικός αριθμός των αρχείων είναι μεγαλύτερος από τον 
    ελάχιστο που δώσαμε ως όρισμα στο πρόγραμμα, τότε εκτυπώνεται ο αριθμός των αρχείων που 
    δημιουργήθηκαν. Διαφορετικά δε γίνεται τίποτα.

    2. LIST ENCRYPTED FILES
    Τα encrypted αρχεία έχουν ως file extension το '.encrypt'. Για να ελέγξουμε αν ένα αρχείο 
    των entries έχει αυτή την κατάληξη, χρησιμοποιήθηκαν τα regular expressions (regex) της C. 
    Γι' αυτό πριν ξεκινήσει η διάσχυση των entries, κάνουμε compile το regex με το οποίο θέλουμε 
    να ταιριάζει το string που εξετάζουμε. Στην περίπτωσή μας αυτό είναι "^.*\.(encrypt)$". Κάθε 
    φορά που η regexec γυρνάει 0, δηλαδή γίνεται match, και όταν το όνομα του αρχείου δεν έχει 
    εισαχθεί ήδη στη λίστα των αρχείων που έχουν γίνει match, τότε το αποθηκεύουμε στη λίστα αυτή. 
    Στο τέλος εκτυπώντονται όλα τα αρχεία που έχουν εισαχθεί σ' αυτή τη λίστα. 



=================================================================================================
test_aclog.c:

Έγινε μια μικρή αλλαγή του εργαλείου από την προηγούμενη εργασία. Για να λειτουργήσει όπως πριν, 
καλούμε το πρόγραμμα ως εξής:

``` ./test_aclog -t ```

Για τη νέα λειτουργία και για τη χρήση του από το ransomware.sh, το καλούμε ως εξής:

``` ./test_aclog -D <dir> -n <num> ```

Με τη νέα λειτουργία, δημιουργούμε num αρχεία στο dir που δώσαμε ως όρισμα (αν αυτό υπάρχει).